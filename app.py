import streamlit as st
import pandas as pd
import openpyxl
from openpyxl.utils import get_column_letter
from io import BytesIO
from datetime import datetime

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
st.title("üì¶ –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ EHT –ª–∏–Ω–∏–π –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ—Ä–æ–±–∫–∞–º –∏ —à–∫–∞—Ñ–∞–º")

with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏")
    max_lines_per_rk = st.number_input("–ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π –≤ –æ–¥–Ω–æ–π –†–ö", min_value=1, value=4)
    rk_circuit_breaker_rating = st.number_input("–ù–æ–º–∏–Ω–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∞ –¥–ª—è –†–ö (–ê)", min_value=1, value=25)
    max_feeders_pipe_control = st.number_input("–ú–∞–∫—Å. –∫–æ—Ä–æ–±–æ–∫ –≤ —à–∫–∞—Ñ—É (Pipe Control)", min_value=1, value=8)
    max_feeders_limiter = st.number_input("–ú–∞–∫—Å. –∫–æ—Ä–æ–±–æ–∫ –≤ —à–∫–∞—Ñ—É (Limiter)", min_value=1, value=6)
    rk_prefix = st.text_input("–ü—Ä–µ—Ñ–∏–∫—Å –†–ö", value="RK")
    panel_prefix = st.text_input("–ü—Ä–µ—Ñ–∏–∫—Å –®–∫–∞—Ñ–∞", value="P")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file, header=7)

    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
    df_extracted = pd.DataFrame({
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏": df.iloc[:, 0],      # A
        "–¢–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞": df.iloc[:, 7],        # H
        "–¢–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": df.iloc[:, 16],     # Q
        "–†–∞–±–æ—á–∏–π —Ç–æ–∫": df.iloc[:, 17],        # R
        "–ü—É—Å–∫–æ–≤–æ–π —Ç–æ–∫": df.iloc[:, 18],       # S
        "–ù–∞–≥—Ä—É–∑–∫–∞": df.iloc[:, 19],           # T
        "‚Ññ –ª–∏–Ω–∏–∏": df.iloc[:, 22]             # V
    })

    st.subheader("üìÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    st.dataframe(df_extracted.head(), use_container_width=True)

    rk_counter = 1
    panel_counter = 1
    rk_list = []
    rk_assignments = []
    unassigned_lines = []

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø—É –ø—Ä–æ—Ü–µ—Å—Å–∞
    for process_type in df_extracted["–¢–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞"].unique():
        process_df = df_extracted[df_extracted["–¢–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞"] == process_type].copy()

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –†–ö
        current_rk = []
        current_rk_type = ""
        current_rk_current = 0.0

        for _, row in process_df.iterrows():
            regulation = row["–¢–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
            current = row["–†–∞–±–æ—á–∏–π —Ç–æ–∫"]
            line_name = row["–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏"]

            regulation_type = "LIMITER" if "limiter" in str(regulation).lower() else "PIPE"

            if current > rk_circuit_breaker_rating:
                rk_assignments.append({
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏": line_name,
                    "–¢–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞": process_type,
                    "–¢–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": regulation,
                    "–†–∞—Å–ø—Ä–µ–¥. –∫–æ—Ä–æ–±–∫–∞": f"{rk_prefix}{rk_counter}",
                    "–®–∫–∞—Ñ": None,
                    "–¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞": "–î–∞"
                })
                rk_list.append({
                    "–ù–æ–º–µ—Ä": f"{rk_prefix}{rk_counter}",
                    "–¢–∏–ø": regulation_type,
                    "–õ–∏–Ω–∏–∏": [line_name],
                    "–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫": current,
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π": 1
                })
                rk_counter += 1
                continue

            if (len(current_rk) < max_lines_per_rk) and (current_rk_type in ["", regulation_type]) and (current_rk_current + current <= rk_circuit_breaker_rating):
                current_rk.append(row)
                current_rk_type = regulation_type
                current_rk_current += current
            else:
                if current_rk:
                    lines = [r["–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏"] for _, r in pd.DataFrame(current_rk).iterrows()]
                    rk_list.append({
                        "–ù–æ–º–µ—Ä": f"{rk_prefix}{rk_counter}",
                        "–¢–∏–ø": current_rk_type,
                        "–õ–∏–Ω–∏–∏": lines,
                        "–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫": current_rk_current,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π": len(lines)
                    })
                    for r in current_rk:
                        rk_assignments.append({
                            "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏": r["–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏"],
                            "–¢–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞": process_type,
                            "–¢–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": r["–¢–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"],
                            "–†–∞—Å–ø—Ä–µ–¥. –∫–æ—Ä–æ–±–∫–∞": f"{rk_prefix}{rk_counter}",
                            "–®–∫–∞—Ñ": None,
                            "–¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞": ""
                        })
                    rk_counter += 1
                current_rk = [row]
                current_rk_type = regulation_type
                current_rk_current = current

        if current_rk:
            lines = [r["–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏"] for _, r in pd.DataFrame(current_rk).iterrows()]
            rk_list.append({
                "–ù–æ–º–µ—Ä": f"{rk_prefix}{rk_counter}",
                "–¢–∏–ø": current_rk_type,
                "–õ–∏–Ω–∏–∏": lines,
                "–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫": current_rk_current,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π": len(lines)
            })
            for r in current_rk:
                rk_assignments.append({
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏": r["–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏"],
                    "–¢–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞": process_type,
                    "–¢–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": r["–¢–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"],
                    "–†–∞—Å–ø—Ä–µ–¥. –∫–æ—Ä–æ–±–∫–∞": f"{rk_prefix}{rk_counter}",
                    "–®–∫–∞—Ñ": None,
                    "–¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∞": ""
                })
            rk_counter += 1

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –†–ö –ø–æ —à–∫–∞—Ñ–∞–º
    panels = []
    current_panel = {"–ù–æ–º–µ—Ä": f"{panel_prefix}{panel_counter}", "–ö–æ—Ä–æ–±–∫–∏": [], "PIPE": 0, "LIMITER": 0, "–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫": 0.0}

    for rk in rk_list:
        rktype = rk["–¢–∏–ø"]
        allowed = max_feeders_pipe_control if rktype == "PIPE" else max_feeders_limiter

        if current_panel[rktype] < allowed:
            current_panel["–ö–æ—Ä–æ–±–∫–∏"].append(rk["–ù–æ–º–µ—Ä"])
            current_panel[rktype] += 1
            current_panel["–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫"] += rk["–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫"]
        else:
            panels.append(current_panel)
            panel_counter += 1
            current_panel = {"–ù–æ–º–µ—Ä": f"{panel_prefix}{panel_counter}", "–ö–æ—Ä–æ–±–∫–∏": [rk["–ù–æ–º–µ—Ä"]], "PIPE": 0, "LIMITER": 0, "–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫": rk["–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫"]}
            current_panel[rktype] = 1

    if current_panel["–ö–æ—Ä–æ–±–∫–∏"]:
        panels.append(current_panel)

    rk_to_panel = {rk: panel["–ù–æ–º–µ—Ä"] for panel in panels for rk in panel["–ö–æ—Ä–æ–±–∫–∏"]}

    for assign in rk_assignments:
        rk = assign["–†–∞—Å–ø—Ä–µ–¥. –∫–æ—Ä–æ–±–∫–∞"]
        assign["–®–∫–∞—Ñ"] = rk_to_panel.get(rk)

    df_result = pd.DataFrame(rk_assignments)
    df_rk_sheet = pd.DataFrame([{
        "‚Ññ –†–ö": rk["–ù–æ–º–µ—Ä"],
        "–¢–∏–ø —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è": rk["–¢–∏–ø"],
        "–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫, –ê": rk["–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫"],
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π": rk["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π"],
        **{f"–õ–∏–Ω–∏—è {i+1}": rk["–õ–∏–Ω–∏–∏"][i] for i in range(len(rk["–õ–∏–Ω–∏–∏"]))}
    } for rk in rk_list])

    df_panel_sheet = pd.DataFrame([{
        "‚Ññ –®–∫–∞—Ñ–∞": panel["–ù–æ–º–µ—Ä"],
        "–ö–æ–ª-–≤–æ –†–ö (Pipe)": panel["PIPE"],
        "–ö–æ–ª-–≤–æ –†–ö (Limiter)": panel["LIMITER"],
        "–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫, –ê": panel["–°—É–º–º–∞—Ä–Ω—ã–π —Ç–æ–∫"],
        **{f"–†–ö {i+1}": panel["–ö–æ—Ä–æ–±–∫–∏"][i] for i in range(len(panel["–ö–æ—Ä–æ–±–∫–∏"]))}
    } for panel in panels])

    now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df_result.to_excel(writer, sheet_name="–†–µ–∑—É–ª—å—Ç–∞—Ç", index=False)
        df_rk_sheet.to_excel(writer, sheet_name="–†–∞—Å–ø—Ä–µ–¥. –∫–æ—Ä–æ–±–∫–∏", index=False)
        df_panel_sheet.to_excel(writer, sheet_name="–®–∫–∞—Ñ—ã", index=False)

        for sheet in writer.book.worksheets:
            for col in sheet.columns:
                max_length = 0
                col_letter = get_column_letter(col[0].column)
                for cell in col:
                    try:
                        if cell.value:
                            max_length = max(max_length, len(str(cell.value)))
                    except:
                        pass
                sheet.column_dimensions[col_letter].width = max_length + 3

    st.success("‚úÖ –†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", output.getvalue(), file_name=f"eht_result_{now}.xlsx")
